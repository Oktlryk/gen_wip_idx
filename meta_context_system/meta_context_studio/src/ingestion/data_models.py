from pydantic import BaseModel, Field
import datetime
from typing import List, Dict, Any, Optional
from enum import Enum

class DocumentType(str, Enum):
    """Enumerates the types of documents the Genesis Engine can ingest."""
    TECHNICAL_REPORT = "technical_report"
    PHILOSOPHY_GUIDELINE = "philosophy_guideline"
    # Add other document types as they are identified

class ContentBlockType(str, Enum):
    """Enumerates the types of content blocks within a document."""
    PARAGRAPH = "paragraph"
    HEADING = "heading"
    CODE_BLOCK = "code_block"
    TABLE = "table"
    LIST_ITEM = "list_item"
    IMAGE = "image"
    # Add other content block types as needed

class ContentBlock(BaseModel):
    """Represents a distinct block of content within a document."""
    block_type: ContentBlockType = Field(..., description="The type of content block.")
    content: str = Field(..., description="The textual content of the block.")
    block_index: int = Field(..., description="The index of this block within the document.")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="Metadata specific to this content block (e.g., section, page_number).")
    embedding: Optional[List[float]] = Field(None, description="Vector embedding of the content block. Populated during interpretation.")

class ParsedDocument(BaseModel):
    """
    Represents a document after it has been parsed into a structured format.
    This model serves as the contract between the parsing and interpretation layers.
    """
    document_id: str = Field(..., description="A unique identifier for the document, typically a hash of its content.")
    document_type: DocumentType = Field(..., description="The categorized type of the document.")
    source_path: str = Field(..., description="The absolute path to the original source file.")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="General metadata about the document (e.g., title, author, publication_date, source_url).")
    content_blocks: List[ContentBlock] = Field(default_factory=list, description="A list of structured content blocks extracted from the document.")

class ReportRequest(BaseModel):
    """Represents a request for a new report to be generated by the system.

    This model defines the structure for communicating identified knowledge gaps
    or needs for new information within the Genesis Engine.
    """
    requested_topic: str = Field(..., description="The precise subject matter for the new report.")
    justification: str = Field(..., description="Why this report is necessary (e.g., to enhance understanding, fill a knowledge gap).")
    key_questions: List[str] = Field(default_factory=list, description="Specific questions the report should answer.")
    desired_format: str = Field("Technical Report", description="The desired format of the report (e.g., Technical Report, Comparative Analysis, Best Practices Guide).")
    priority_level: str = Field("Medium", description="The priority level for generating this report (e.g., Critical, High, Medium, Low).")
    suggested_sources: List[str] = Field(default_factory=list, description="Optional: Suggested sources or areas for research for the report.")
    generated_by: str = Field("KnowledgeBaseAnalyzer", description="The component that generated this report request.")
    timestamp: str = Field(default_factory=lambda: datetime.datetime.now().strftime("%Y%m%dT%H%M%S"), description="Timestamp of when the request was generated.")